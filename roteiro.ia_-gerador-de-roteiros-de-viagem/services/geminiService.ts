
import { GoogleGenAI, GenerateContentResponse, Content, GenerateImagesResponse } from "@google/genai";
import { ItineraryFormData, SeasonOption, BudgetOption, DestinationDetail, QuickTripFormData, QuickTripFocusOption } from '../types';
import { GEMINI_MODEL_TEXT, GEMINI_MODEL_IMAGE } from '../constants';

let genAIInstance: GoogleGenAI | null = null;

const getGenAIInstance = (): GoogleGenAI => {
  if (!genAIInstance) {
    if (!process.env.API_KEY) {
      console.error("API_KEY n√£o configurada. Defina process.env.API_KEY.");
      throw new Error("API_KEY n√£o configurada. Verifique as vari√°veis de ambiente em seu setup.");
    }
    genAIInstance = new GoogleGenAI({ apiKey: process.env.API_KEY });
  }
  return genAIInstance;
};

const COMMON_PROMPT_INSTRUCTIONS = `
**Instru√ß√µes Cr√≠ticas para o Roteiro (Aplic√°veis a Gera√ß√£o Inicial e Refinamento):**
1.  **T√≠tulo/Destino Principal da Viagem:** {MAIN_DESTINATION_TITLE}
2.  **Dura√ß√£o Total da Viagem:** {DURATION} dias
3.  **Foco Principal da Viagem:** {FOCUS}
4.  **Tom Geral do Roteiro:** {TONE} (Note que o Perfil de Or√ßamento, se especificado, tem preced√™ncia para quest√µes de custo)
5.  **Nacionalidade do Viajante (para dicas de documentos):** {NATIONALITY}
{MULTI_DESTINATION_INSTRUCTION}
{TRAVEL_REQUIREMENTS_INSTRUCTION}

**Instru√ß√µes para √çcones (IMPORTANTE PARA O FRONTEND):**
Para melhorar a visualiza√ß√£o no frontend, PREFIXE cada item de lista (bullet points \`*\` ou \`-\`) relevante com um dos seguintes marcadores de texto. O frontend substituir√° esses marcadores por √≠cones.
Use APENAS estes marcadores, EXATAMENTE como especificados, no IN√çCIO do texto do item da lista.
N√ÉO use emojis diretamente para esta finalidade, use os marcadores textuais.

*   \`[ICON:RESTAURANT]\` - Para restaurantes, caf√©s, locais de alimenta√ß√£o.
*   \`[ICON:ACCOMMODATION]\` - Para hot√©is, hostels, locais de hospedagem.
*   \`[ICON:MUSEUM]\` - Para museus.
*   \`[ICON:CULTURE]\` - Para outros locais culturais, teatros, galerias, monumentos hist√≥ricos.
*   \`[ICON:NATURE]\` - Para locais de natureza como montanhas, praias, lagos.
*   \`[ICON:PARK]\` - Para parques urbanos, jardins.
*   \`[ICON:SHOPPING]\` - Para lojas, mercados, shoppings.
*   \`[ICON:FLIGHT]\` - Para informa√ß√µes sobre voos.
*   \`[ICON:TRAIN]\` - Para informa√ß√µes sobre trens.
*   \`[ICON:BUS]\` - Para informa√ß√µes sobre √¥nibus.
*   \`[ICON:CAR]\` - Para informa√ß√µes sobre transporte de carro, t√°xi, aluguel.
*   \`[ICON:TRANSPORT]\` - Para informa√ß√µes gerais sobre transporte ou transfer√™ncias entre locais/cidades.
*   \`[ICON:WALKING]\` - Para passeios a p√©, caminhadas.
*   \`[ICON:INFO]\` - Para informa√ß√µes gerais importantes.
*   \`[ICON:TIP]\` - Para dicas pr√°ticas.
*   \`[ICON:COST]\` - Para informa√ß√µes espec√≠ficas de custo de uma atividade/item.
*   \`[ICON:TIME]\` - Para hor√°rios, dura√ß√µes de atividades.
*   \`[ICON:ACTIVITY]\` - Para atividades gerais ou pontos de interesse n√£o cobertos acima.
*   \`[ICON:PHOTO]\` - Para locais bons para fotos.
*   \`[ICON:MAP_PIN]\` - Para um local espec√≠fico ou endere√ßo.
*   \`[ICON:LANGUAGE]\` - Para dicas de idioma.
*   \`[ICON:LUGGAGE]\` - Para itens da lista de bagagem.
*   \`[ICON:PASSPORT]\` - Para informa√ß√µes sobre documentos, vistos, passaportes.

Se um item n√£o se encaixar claramente em uma categoria, use \`[ICON:ACTIVITY]\` ou omita o marcador de √≠cone.
Certifique-se de que os r√≥tulos como \`**Endere√ßo:**\`, \`**Avalia√ß√£o Google:**\`, etc., venham DEPOIS do marcador de √≠cone e do nome principal da atividade/local.
Exemplo CORRETO: \`* [ICON:RESTAURANT] Jantar no **[Nome do Restaurante](URL_OFICIAL_RESTAURANTE)**\n    * [ICON:MAP_PIN] **Endere√ßo:** 123 Rue de la Paix, Paris\n    * [ICON:COST] **Custo Estimado:** $$$\`
Exemplo INCORRETO: \`* **Endere√ßo:** [ICON:MAP_PIN] 123 Rue de la Paix, Paris\` (marcador n√£o est√° no in√≠cio do item)

**Formato OBRIGAT√ìRIO da Resposta (Markdown):**
*   **A resposta DEVE ser exclusivamente em formato Markdown.** N√£o adicione introdu√ß√µes ou conclus√µes fora do roteiro.
*   **N√ÉO CRIE SE√á√ïES COM T√çTULOS GEN√âRICOS COMO "## Detalhes".** Todos os t√≠tulos de se√ß√£o devem ser descritivos (ex: "## Informa√ß√µes Gerais...", "## Dia 1: ...", "## Chegada em [Cidade]...", "## Dicas de Idioma Local", "## Lista de Bagagem Sugerida", "## Documentos Necess√°rios...").
*   **Se√ß√£o Inicial OBRIGAT√ìRIA:** Comece o roteiro com a se√ß√£o de Informa√ß√µes Gerais, Clima e Custos Estimados, conforme detalhado abaixo.
    {INITIAL_INFORMATION_SECTION}
{DOCUMENTS_SECTION}
{LANGUAGE_TIPS_SECTION}
{PACKING_LIST_SECTION}
*   **Organiza√ß√£o por Dia:**
    *   Ap√≥s as se√ß√µes iniciais (e ap√≥s cada se√ß√£o de transi√ß√£o para um novo destino, se aplic√°vel), comece CADA dia com um t√≠tulo de n√≠vel 2 (Markdown: \`##\`) e MUITO CLARO: \`## Dia X: T√≠tulo Descritivo Curto do Dia\` (ex: \`## Dia 1: Chegada em Paris e Charme de Montmartre\`).
    *   Se for uma viagem multi-destinos, o t√≠tulo do dia deve indicar claramente a cidade atual se ela mudou, ou o t√≠tulo da se√ß√£o de transi√ß√£o deve fazer isso.
    *   **N√ÉO use uma linha horizontal (\`---\`) em Markdown ou qualquer outra forma de separador visual expl√≠cito entre os dias.** O frontend cuidar√° da separa√ß√£o visual.
*   **Detalhes EXTREMAMENTE RICOS para Cada Dia:**
    *   **Subt√≠tulos para Per√≠odos do Dia:** Para cada dia, use t√≠tulos de n√≠vel 3 (Markdown: \`###\`) com um emoji relevante (sugest√£o: ‚òÄÔ∏è Manh√£, ‚òï Brunch/Caf√©, üçΩÔ∏è Almo√ßo, üñºÔ∏è Tarde, üåá P√¥r do Sol, üåô Jantar/Noite) e texto em negrito para separar claramente os per√≠odos. Insira UMA linha em branco antes de cada subt√≠tulo de per√≠odo para espa√ßamento. Exemplo: \`### ‚òÄÔ∏è **Manh√£**\`
    *   **Atividades Espec√≠ficas (como Bullet Points com √çcones):** Dentro de cada per√≠odo, liste as atividades, sugest√µes e informa√ß√µes como itens de lista (bullet points \`*\` ou \`-\`), APLICANDO OS MARCADORES DE √çCONE. Use sub-itens para agrupar informa√ß√µes relacionadas.
        *   **Nomes Espec√≠ficos e em Negrito:** Use **negrito** para nomes de lugares, atra√ß√µes, restaurantes.
        *   **R√≥tulos Importantes em Negrito:** Coloque os seguintes r√≥tulos SEMPRE em negrito: \`**Endere√ßo:**\`, \`**Avalia√ß√£o Google:**\`, \`**Hor√°rio de Funcionamento:**\`, \`**Transporte:**\`, \`**Dica:**\`, \`**Custo Estimado da Atividade/Refei√ß√£o:**\`, \`**Dura√ß√£o Estimada:**\`, \`**Como Chegar:**\`, \`**Ingressos (Onde Comprar):**\`, \`**Coordenadas (Lat,Lon):**\`.
        *   **Conte√∫do Detalhado:** Para cada atividade principal, forne√ßa:
            *   Breve descri√ß√£o e por que √© interessante.
            *   Sugest√µes de hor√°rios (ex: "idealmente entre 10h-12h para evitar multid√µes").
            *   Op√ß√µes alternativas ou complementares nas proximidades.
            *   Informa√ß√µes culturais ou hist√≥ricas relevantes e concisas.
            *   Dicas pr√°ticas espec√≠ficas (ex: "use o port√£o lateral menos movimentado", "compre √°gua antes de entrar", "melhor √¢ngulo para fotos √© da ponte X").
            *   Sugest√µes de transporte ENTRE as atividades do dia (ex: "daqui, pegue o metr√¥ Linha Y por 3 paradas at√© Z" ou "uma caminhada agrad√°vel de 15 minutos pela Rua A").
            *   **Coordenadas (Lat,Lon):** (Se encontradas, fornecer Latitude,Longitude. Ex: 48.8584,2.2945)
        *   **Links Inline e Contextuais para SITES OFICIAIS/RESERVAS (CRUCIAL!):** Integre os links DIRETAMENTE no texto da atividade/local, tornando o nome do local (em negrito) o texto clic√°vel do link. **FORNE√áA APENAS URLs COMPLETAS, V√ÅLIDAS, DIRETAS e FUNCIONAIS para SITES OFICIAIS ou P√ÅGINAS DE RESERVA/INFORMA√á√ÉO DIRETA. N√ÉO forne√ßa links de resultados de busca do Google, links de blogs gen√©ricos (a menos que seja o blog oficial da atra√ß√£o), ou links para p√°ginas principais de agregadores sem especificar a atra√ß√£o. Se, ap√≥s a pesquisa, n√£o encontrar uma URL oficial/de reserva direta e funcional, OMITA o link para esse item espec√≠fico.** N√ÉO invente URLs ou use placeholders como \`URL_DO_LUGAR\`.
        *   **Exemplo de Item com √çcone e Detalhes:**
            \`\`\`
            * [ICON:RESTAURANT] Almo√ßo no **[Le Bouillon Chartier](https://www.bouillon-chartier.com/fr/grands-boulevards)**
                * [ICON:MAP_PIN] **Endere√ßo:** 7 Rue du Faubourg Montmartre, 75009 Paris, Fran√ßa
                * **Avalia√ß√£o Google:** 4.1/5 (25k reviews) - Pesquisar avalia√ß√£o real.
                * [ICON:COST] **Custo Estimado da Atividade/Refei√ß√£o:** ‚Ç¨15-‚Ç¨25 por pessoa
                * [ICON:TIME] **Hor√°rio de Funcionamento:** 11:30 - 22:00
                * [ICON:TRAIN] **Como Chegar:** Metr√¥ Linha 8 ou 9, Esta√ß√£o Grands Boulevards.
                * [ICON:TIP] **Dica:** Chegue cedo (antes das 12h ou ap√≥s as 14h para almo√ßo) ou esteja preparado para uma pequena fila, pois n√£o aceitam reservas. Ambiente tradicional parisiense.
                * **Coordenadas (Lat,Lon):** 48.8722,2.3444 
            \`\`\`
    *   **Link do Google Maps para a Rota do Dia:** Ao FINAL da se√ß√£o de cada dia (ap√≥s todas as atividades e dicas gerais do dia), adicione um link para o Google Maps que mostre a rota entre os principais pontos mencionados NAQUELE DIA. Use o formato de dire√ß√µes (\`https://www.google.com/maps/dir/Local1/Local2/Local3\`). Use os nomes dos locais ou endere√ßos que voc√™ j√° listou. O texto do link DEVE SER **EM NEGRITO E EM MAI√öSCULAS**.
        *   Exemplo: \`[**VER ROTA DO DIA NO GOOGLE MAPS**](https://www.google.com/maps/dir/Torre+Eiffel,Paris/Museu+do+Louvre,Paris/Catedral+de+Notre+Dame,Paris)\`
*   **Linguagem:** Use uma linguagem envolvente e inspiradora, adaptada ao tom e perfil de or√ßamento solicitados.
*   **N√ÉO inclua nenhum texto introdut√≥rio ou conclusivo fora do roteiro em Markdown. Apenas o roteiro, come√ßando com a se√ß√£o inicial de informa√ß√µes gerais/custos/clima, e depois diretamente com "## Dia 1: ...".**
*   **N√ÉO inclua uma se√ß√£o "Fontes de Informa√ß√£o" ou "Links de Pesquisa Adicionais" no final. Os √∫nicos links devem ser os inline e o link da rota do dia no Google Maps, conforme especificado.**
`;


const buildPromptSections = (formData: ItineraryFormData, forRefinement: boolean = false) => {
  const { 
    destination, duration, focus, tone, season, budget, currency, 
    isMultiDestination, destinations, includeLanguageTips, nationality,
    travelRequirements 
  } = formData;

  let multiDestinationInstruction = "";
  let mainDestinationTitle = destination;

  if (isMultiDestination && destinations && destinations.length > 0) {
    mainDestinationTitle = destination || "Viagem Personalizada"; 
    const destinationSegments = destinations.map(d => `*   **${d.name}**: ${d.days} dia(s)`).join("\n");
    multiDestinationInstruction = `
*   **M√∫ltiplos Destinos Solicitados:** Esta √© uma viagem com m√∫ltiplos destinos. Planeje o roteiro sequencialmente, cobrindo cada destino listado abaixo pelo n√∫mero de dias especificado.
    ${destinationSegments}
*   **Numera√ß√£o dos Dias:** A contagem dos dias (\`## Dia 1\`, \`## Dia 2\`, etc.) deve ser cont√≠nua ao longo de TODA a viagem, mesmo ao mudar de cidade.
*   **Transi√ß√£o entre Destinos:** Para cada transi√ß√£o entre um destino e o pr√≥ximo:
    *   Indique claramente o final das atividades no destino atual.
    *   Sugira meios de transporte (ex: trem, voo de baixo custo, √¥nibus, carro alugado), incluindo estimativas de tempo e custo se poss√≠vel, e onde reservar (com links oficiais, se aplic√°vel). Use [ICON:TRANSPORT] para estas sugest√µes.
    *   Inicie o pr√≥ximo segmento do roteiro com um t√≠tulo claro, como por exemplo: \`## Seguindo para [Nome do Pr√≥ximo Destino] ([X] dias)\` ou \`## Chegada em [Nome do Pr√≥ximo Destino] e In√≠cio da Explora√ß√£o\`.
*   A "Dura√ß√£o da Viagem" total de ${duration} dias deve ser respeitada, distribuindo os dias conforme especificado para cada sub-destino. Se a soma dos dias dos sub-destinos n√£o bater com a dura√ß√£o total, priorize a dura√ß√£o total e ajuste os dias nos sub-destinos proporcionalmente ou conforme fizer mais sentido log√≠stico.
`;
  } else {
    multiDestinationInstruction = `*   **Destino √önico:** Concentre-se estritamente na cidade/regi√£o especificada como '${mainDestinationTitle}' e suas √°reas imediatas.`;
  }

  let seasonInstruction = "";
  if (season && season !== SeasonOption.QUALQUER) {
    seasonInstruction = `
*   **Esta√ß√£o da Viagem Solicitada:** ${season}.
*   Pesquise e inclua um breve resumo das condi√ß√µes clim√°ticas m√©dias para ${mainDestinationTitle} (ou para cada destino, se relevante e diferente) durante esta esta√ß√£o:
    *   **Temperatura M√©dia:** (ex: M√≠nima X¬∞C, M√°xima Y¬∞C ou M√©dia Z¬∞C).
    *   **Precipita√ß√£o M√©dia:** (ex: X mm de chuva por m√™s, ou X dias de chuva em m√©dia no per√≠odo).
    *   **Dica de Vestu√°rio:** Com base no clima, sugira brevemente que tipo de roupa levar.
`;
  }

  let budgetInstructionSegment = "";
  if (budget && budget !== BudgetOption.QUALQUER) {
    budgetInstructionSegment = `
*   **Perfil de Or√ßamento da Viagem:** ${budget}.
    *   Ao sugerir atividades, restaurantes, e (se poss√≠vel) tipos de acomoda√ß√£o, leve em considera√ß√£o este perfil de or√ßamento.
        *   Para **${BudgetOption.ECONOMICO}**: Foque em op√ß√µes gratuitas ou de baixo custo, hostels/albergues, comida de rua/mercados locais, uso intensivo de transporte p√∫blico.
        *   Para **${BudgetOption.MODERADO}**: Equilibre custo e conforto, hot√©is de categoria m√©dia/Airbnb, restaurantes com bom custo-benef√≠cio, algumas atra√ß√µes pagas importantes.
        *   Para **${BudgetOption.LUXO}**: Sugira experi√™ncias premium, hot√©is de luxo/boutique, restaurantes renomados, passeios privados ou exclusivos.
    *   A estimativa de custos DEVE refletir este perfil.
`;
  }

  let costEstimationInstruction = `
*   **Estimativa de Custos Detalhada:** (Considerar para cada destino principal se for uma viagem multi-destinos com moedas locais diferentes)
    *   Pesquise e forne√ßa uma estimativa de custo di√°rio para a viagem (ou para cada destino principal, se aplic√°vel), na **moeda local** do(s) destino(s). Especifique CLARAMENTE qual √© a moeda local (ex: "EUR para Euro", "JPY para Iene Japon√™s").
    *   Apresente esta estimativa como uma faixa (ex: "Custo Di√°rio Estimado (Moeda Local): 100-150 XXX").
    ${currency && currency.trim().length === 3 ? `
    *   Converta esta estimativa di√°ria para **${currency.toUpperCase()}** (Moeda do Usu√°rio), usando taxas de c√¢mbio aproximadas atuais (pesquisadas via Google Search). Apresente como uma faixa (ex: "aproximadamente 50-75 ${currency.toUpperCase()}"). Indique que √© uma convers√£o aproximada e a taxa de c√¢mbio pode variar.
    ` : `
    *   N√£o foi solicitada convers√£o para outra moeda. Apresente os custos apenas na moeda local.
    `}
    *   Calcule uma **Estimativa de Custo Total da Viagem** (excluindo passagens a√©reas internacionais/intercontinentais, a menos que explicitamente parte do escopo regional) multiplicando a m√©dia do custo di√°rio pela dura√ß√£o da viagem. Apresente este total na moeda local e, se aplic√°vel, na moeda do usu√°rio.
    *   Adicione uma breve nota: "Estas s√£o estimativas para ${budget !== BudgetOption.QUALQUER ? budget : 'um perfil geral'} e os custos reais podem variar significativamente com base nas escolhas pessoais, √©poca do ano, e promo√ß√µes."
`;

  const initialInformationSection = `
## Informa√ß√µes Gerais, Clima e Custos Estimados para ${mainDestinationTitle}
${budgetInstructionSegment}
${costEstimationInstruction}
${seasonInstruction ? `\n### Condi√ß√µes Clim√°ticas para ${season}\n${seasonInstruction}` : ''}
`;

  let languageTipsSection = "";
  if (includeLanguageTips) {
    languageTipsSection = `
## [ICON:LANGUAGE] Dicas de Idioma Local para ${mainDestinationTitle}
*   Pesquise o(s) idioma(s) principal(is) falado(s) em ${mainDestinationTitle} (e outros destinos, se aplic√°vel e diferente).
*   Forne√ßa uma lista de 5-10 frases b√°sicas e √∫teis nesse idioma, como:
    *   Ol√° / Bom dia / Boa tarde / Boa noite
    *   Por favor
    *   Obrigado(a)
    *   De nada
    *   Sim / N√£o
    *   Com licen√ßa / Desculpe
    *   Quanto custa?
    *   Onde fica o banheiro?
    *   Eu n√£o entendo
    *   Voc√™ fala ingl√™s (ou portugu√™s)?
*   Para cada frase, inclua:
    *   A frase no idioma local.
    *   Uma pron√∫ncia simplificada e fon√©tica (ex: para "Merci" em franc√™s, "mer-SSI").
    *   A tradu√ß√£o em portugu√™s.
*   Formate como uma lista ou tabela clara. Ex: \`* [ICON:LANGUAGE] **Ol√°:** Bonjour (bon-JUR)\`
`;
  }

  const packingListSection = `
## [ICON:LUGGAGE] Lista de Bagagem Sugerida para ${mainDestinationTitle}
Com base no destino (${mainDestinationTitle}), dura√ß√£o (${duration} dias), esta√ß√£o (${season || 'qualquer'}), foco (${focus}) e perfil de or√ßamento (${budget || 'qualquer'}), sugira uma lista de itens essenciais e recomendados para levar na mala.
*   Categorize os itens (Ex: Roupas, Documentos, Eletr√¥nicos, Higiene, Sa√∫de, Outros).
*   Seja espec√≠fico (ex: em vez de "casaco", diga "casaco imperme√°vel leve" se o clima pedir).
*   Lembre-se de adaptadores de tomada, se necess√°rio para o destino.
*   Formate como uma lista de itens simples em Markdown (Ex: \`* Camisetas (3-4)\`).
    *   \`[ICON:LUGGAGE] Camisetas (3-4)\`
    *   \`[ICON:LUGGAGE] Protetor solar\`
    *   \`[ICON:LUGGAGE] Passaporte\`
`;

  let documentsSection = "";
  if (nationality && nationality.trim() !== "") {
    documentsSection = `
## [ICON:PASSPORT] Documentos Necess√°rios e Vistos para Cidad√£os de ${nationality}
Com base na nacionalidade informada (${nationality}), pesquise (usando Google Search) e detalhe os requisitos de entrada para ${mainDestinationTitle} (e para cada destino adicional, se a viagem for multi-destinos e os requisitos variarem).
*   **Visto:** √â necess√°rio visto para cidad√£os de ${nationality}? Se sim, qual tipo, como solicitar (link para site oficial da embaixada/consulado, se poss√≠vel), custo estimado e tempo de processamento.
*   **Passaporte:** Requisitos de validade do passaporte (ex: m√≠nimo 6 meses ap√≥s a data de sa√≠da).
*   **Outros Documentos:** Certificado internacional de vacina√ß√£o (ex: febre amarela), seguro viagem obrigat√≥rio, comprovante de recursos financeiros, passagem de volta, etc.
*   Para cada destino na viagem, se os requisitos forem diferentes, crie subse√ß√µes claras.
*   Forne√ßa links para fontes oficiais SEMPRE QUE POSS√çVEL.
*   Exemplo de item: \`* [ICON:PASSPORT] **Visto para [Destino X]:** N√£o necess√°rio para turismo at√© 90 dias para cidad√£os de ${nationality}.\`
                \`* [ICON:PASSPORT] **Passaporte:** Deve ser v√°lido por pelo menos 6 meses ap√≥s a data de sa√≠da de [Destino X].\`
`;
  }
  
  let travelRequirementsInstruction = "";
  // For refinement, this section will be handled differently in the main prompt construction
  if (!forRefinement && travelRequirements && travelRequirements.trim() !== "") {
    travelRequirementsInstruction = `
## Requisitos Especiais do Viajante (ALTA PRIORIDADE):
O viajante especificou os seguintes requisitos, prefer√™ncias ou locais obrigat√≥rios. Tente ao m√°ximo incorpor√°-los de forma natural e l√≥gica no roteiro, respeitando o foco, tom e or√ßamento da viagem:
"${travelRequirements.replace(/\n/g, '\n  * ')}" 
Se algum requisito for invi√°vel, muito dif√≠cil de encaixar, ou contradit√≥rio com outros aspectos da viagem (ex: um local muito distante para a dura√ß√£o, um restaurante que n√£o se encaixa no or√ßamento, uma atividade que destoa do foco), mencione isso brevemente na se√ß√£o de informa√ß√µes gerais ou no dia relevante, explique o porqu√™, e sugira uma alternativa se poss√≠vel. Caso contr√°rio, priorize a inclus√£o dos demais requisitos e do plano geral.
`;
  }

  return {
    mainDestinationTitle,
    duration,
    focus,
    tone,
    nationality: nationality || "N√£o informada",
    multiDestinationInstruction,
    travelRequirementsInstruction,
    initialInformationSection,
    documentsSection,
    languageTipsSection,
    packingListSection,
  };
};

const fillCommonInstructions = (
  commonTemplate: string,
  placeholders: ReturnType<typeof buildPromptSections>
) => {
  return commonTemplate
    .replace('{MAIN_DESTINATION_TITLE}', placeholders.mainDestinationTitle)
    .replace('{DURATION}', placeholders.duration.toString())
    .replace('{FOCUS}', placeholders.focus)
    .replace('{TONE}', placeholders.tone)
    .replace('{NATIONALITY}', placeholders.nationality)
    .replace('{MULTI_DESTINATION_INSTRUCTION}', placeholders.multiDestinationInstruction)
    .replace('{TRAVEL_REQUIREMENTS_INSTRUCTION}', placeholders.travelRequirementsInstruction)
    .replace('{INITIAL_INFORMATION_SECTION}', placeholders.initialInformationSection)
    .replace('{DOCUMENTS_SECTION}', placeholders.documentsSection)
    .replace('{LANGUAGE_TIPS_SECTION}', placeholders.languageTipsSection)
    .replace('{PACKING_LIST_SECTION}', placeholders.packingListSection);
};


export const generateItinerary = async (
  formData: ItineraryFormData
): Promise<GenerateContentResponse> => {
  const ai = getGenAIInstance();
  const placeholders = buildPromptSections(formData);
  
  const filledInstructions = fillCommonInstructions(COMMON_PROMPT_INSTRUCTIONS, placeholders);

  const prompt = `
Voc√™ √© um planejador de viagens expert e criativo. Sua miss√£o √© gerar um roteiro de viagem EXTREMAMENTE DETALHADO, PR√ÅTICO, VISUALMENTE ORGANIZADO e √öTIL para ${placeholders.mainDestinationTitle}. Utilize o Google Search (ferramenta interna) para encontrar informa√ß√µes atualizadas, incluindo endere√ßos, avalia√ß√µes, hor√°rios de funcionamento, **especialmente para encontrar os URLs corretos para sites oficiais ou p√°ginas de reserva/informa√ß√£o direta, e para pesquisar custos, taxas de c√¢mbio e requisitos de visto/documentos.**

${filledInstructions}

Comece o roteiro DIRETAMENTE com a se√ß√£o de Informa√ß√µes Gerais, Clima e Custos Estimados, seguida pelas se√ß√µes opcionais (Documentos, Dicas de Idioma, Lista de Bagagem), e ent√£o "## Dia 1: ...".
`;

  const contents: Content[] = [{ role: "user", parts: [{text: prompt}] }];

  try {
    const response = await ai.models.generateContent({
      model: GEMINI_MODEL_TEXT,
      contents: contents,
      config: { tools: [{googleSearch: {}}] }
    });
    return response;
  } catch (error) {
    console.error("Erro ao chamar a API Gemini para gerar roteiro:", error);
    if (error instanceof Error) {
        if (error.message.includes('API_KEY_INVALID') || error.message.includes('API key not valid')) {
             throw new Error("Chave de API inv√°lida. Verifique sua configura√ß√£o.");
        }
         if (error.message.includes('Quota') || error.message.includes('quota')) {
            throw new Error("Cota da API excedida. Tente novamente mais tarde.");
        }
         if (error.message.toLowerCase().includes('billing') || error.message.toLowerCase().includes('conta de faturamento')) {
            throw new Error("Problema com a conta de faturamento do Google Cloud. Verifique suas configura√ß√µes de faturamento.");
        }
        if (error.message.toLowerCase().includes('permission denied') || error.message.toLowerCase().includes('access denied')) {
            throw new Error("Permiss√£o negada para acessar a API Gemini. Verifique as permiss√µes da sua chave de API no Google Cloud.");
        }
         if (error.message.toLowerCase().includes('model_not_supported') || error.message.toLowerCase().includes('model not found')) {
            throw new Error(`O modelo ${GEMINI_MODEL_TEXT} n√£o √© suportado ou n√£o foi encontrado. Verifique o nome do modelo.`);
        }
    }
    throw new Error("Falha ao gerar roteiro. A IA pode estar sobrecarregada, houve um problema na comunica√ß√£o, na configura√ß√£o da API ou o modelo n√£o suporta as ferramentas solicitadas. Tente novamente ou verifique o console para mais detalhes.");
  }
};


export const refineItinerary = async (
  originalItineraryMarkdown: string,
  refinementInstructions: string,
  originalFormData: ItineraryFormData
): Promise<GenerateContentResponse> => {
  const ai = getGenAIInstance();
  
  const placeholders = buildPromptSections(originalFormData, true); 

  const refinementSpecificTravelRequirements = `
## INSTRU√á√ïES DE REFINAMENTO (Aplicar ao roteiro existente abaixo):
O viajante forneceu as seguintes instru√ß√µes para modificar o roteiro. Aplique-as de forma coesa e l√≥gica, atualizando todas as se√ß√µes relevantes (incluindo informa√ß√µes gerais, custos, clima, dicas de idioma, lista de bagagem, documentos e os dias do roteiro) se as instru√ß√µes impactarem esses elementos.
"${refinementInstructions.replace(/\n/g, '\n  * ')}"

Se as instru√ß√µes de refinamento conflitarem fortemente com o foco, tom ou or√ßamento original (informados abaixo para sua refer√™ncia), tente encontrar um equil√≠brio ou, se n√£o for poss√≠vel, priorize as novas instru√ß√µes de refinamento, mas mencione o ajuste e o motivo.
Mantenha o m√°ximo poss√≠vel do conte√∫do e estrutura original do roteiro que n√£o for afetado pelas novas instru√ß√µes.
`;
  
  const filledInstructions = fillCommonInstructions(
    COMMON_PROMPT_INSTRUCTIONS.replace('{TRAVEL_REQUIREMENTS_INSTRUCTION}', refinementSpecificTravelRequirements), 
    placeholders
  );

  const prompt = `
Voc√™ √© um planejador de viagens expert e criativo. Sua tarefa √© MODIFICAR um ROTEIRO EXISTENTE com base em INSTRU√á√ïES DE REFINAMENTO.
Utilize o Google Search (ferramenta interna) para encontrar informa√ß√µes atualizadas, se necess√°rio para as modifica√ß√µes.

**Contexto Original da Viagem (para refer√™ncia ao aplicar refinamentos):**
*   **T√≠tulo/Destino Principal:** ${originalFormData.destination}
*   **Dura√ß√£o Total:** ${originalFormData.duration} dias
*   **Foco Principal:** ${originalFormData.focus}
*   **Tom Geral:** ${originalFormData.tone}
*   **Esta√ß√£o:** ${originalFormData.season || "N√£o especificada"}
*   **Perfil de Or√ßamento:** ${originalFormData.budget || "N√£o especificado"}
*   **Nacionalidade do Viajante:** ${originalFormData.nationality || "N√£o informada"}
*   **Requisitos Originais (j√° considerados no roteiro existente):** ${originalFormData.travelRequirements || "Nenhum"}

---
**ROTEIRO EXISTENTE (EM MARKDOWN):**
---
${originalItineraryMarkdown}
---
FIM DO ROTEIRO EXISTENTE.
---

Agora, com base nas INSTRU√á√ïES DE REFINAMENTO e no CONTEXTO ORIGINAL fornecidos acima, modifique o ROTEIRO EXISTENTE.
${filledInstructions}

Produza o roteiro MODIFICADO E COMPLETO em Markdown, seguindo TODAS as diretrizes de formata√ß√£o e estrutura detalhadas.
Comece o roteiro DIRETAMENTE com a se√ß√£o de Informa√ß√µes Gerais, Clima e Custos Estimados (atualizada se necess√°rio), seguida pelas se√ß√µes opcionais (Documentos, Dicas de Idioma, Lista de Bagagem - atualizadas se necess√°rio), e ent√£o "## Dia 1: ..." (com dias e atividades atualizados conforme o refinamento).
`;

  const contents: Content[] = [{ role: "user", parts: [{text: prompt}] }];

  try {
    const response = await ai.models.generateContent({
      model: GEMINI_MODEL_TEXT,
      contents: contents,
      config: { tools: [{googleSearch: {}}] }
    });
    return response;
  } catch (error) {
    console.error("Erro ao chamar a API Gemini para refinar roteiro:", error);
     if (error instanceof Error) {
        if (error.message.includes('API_KEY_INVALID') || error.message.includes('API key not valid')) {
             throw new Error("Chave de API inv√°lida. Verifique sua configura√ß√£o.");
        }
         if (error.message.includes('Quota') || error.message.includes('quota')) {
            throw new Error("Cota da API excedida. Tente novamente mais tarde.");
        }
         if (error.message.toLowerCase().includes('billing') || error.message.toLowerCase().includes('conta de faturamento')) {
            throw new Error("Problema com a conta de faturamento do Google Cloud. Verifique suas configura√ß√µes de faturamento.");
        }
        if (error.message.toLowerCase().includes('permission denied') || error.message.toLowerCase().includes('access denied')) {
            throw new Error("Permiss√£o negada para acessar a API Gemini. Verifique as permiss√µes da sua chave de API no Google Cloud.");
        }
    }
    throw new Error("Falha ao refinar roteiro. A IA pode estar sobrecarregada ou houve um problema na comunica√ß√£o. Tente novamente ou verifique o console para mais detalhes.");
  }
};


export const generateDestinationImage = async (
  destination: string
): Promise<string | null> => {
  if (!destination) return null;
  const ai = getGenAIInstance();

  const prompt = `Uma fotografia deslumbrante e ic√¥nica de ${destination}. Imagem vibrante, clara, qualidade profissional, representando a ess√™ncia do local. Estilo cinematogr√°fico, alta resolu√ß√£o. Sem texto ou marcas d'√°gua.`;

  try {
    const response: GenerateImagesResponse = await ai.models.generateImages({
      model: GEMINI_MODEL_IMAGE,
      prompt: prompt,
      config: { numberOfImages: 1, outputMimeType: 'image/jpeg' },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    }
    console.warn("Nenhuma imagem foi gerada pela API ou a resposta n√£o continha dados da imagem.");
    return null;
  } catch (error) {
    console.error("Erro ao gerar imagem do destino:", error);
    return null;
  }
};

export const generateQuickTrip = async (
  formData: QuickTripFormData
): Promise<GenerateContentResponse> => {
  const ai = getGenAIInstance();
  const { availableTime, currentLocation, focus } = formData;

  const prompt = `
Voc√™ √© um assistente de concierge local ultra-r√°pido e experiente. Um usu√°rio tem ${availableTime} hora(s) livre(s), est√° atualmente em/pr√≥ximo a: "${currentLocation}", e tem interesse em um passeio com foco em: "${focus || QuickTripFocusOption.MIX}".

Sua tarefa √© criar um micro-roteiro com 1 a 3 sugest√µes de atividades, incluindo locais para visitar e, se relevante e o tempo permitir, uma sugest√£o r√°pida de onde comer algo. Considere o tempo de deslocamento entre os locais. **Adapte as sugest√µes ao foco informado.**

**Instru√ß√µes Cr√≠ticas:**
1.  **Localiza√ß√£o Inicial:** ${currentLocation}
2.  **Tempo Total Dispon√≠vel:** ${availableTime} hora(s). Planeje atividades que se encaixem realisticamente neste tempo, incluindo deslocamentos. Se o tempo for muito curto (ex: menos de 1 hora), sugira apenas uma atividade muito pr√≥xima.
3.  **Foco do Passeio:** ${focus || QuickTripFocusOption.MIX}. Priorize experi√™ncias que se alinhem com este foco. Por exemplo, se o foco for "Gastronomia & Caf√©s", sugira caf√©s charmosos, mercados gourmet r√°pidos, ou lojas de especialidades. Se for "Cultural & Hist√≥rico", sugira um monumento, uma galeria pequena, ou um ponto de interesse hist√≥rico de visita r√°pida.
4.  **Transporte:** Sugira o meio de transporte mais pr√°tico (ex: a p√©, metr√¥, √¥nibus, t√°xi/app). Use os √≠cones de transporte apropriados.
5.  **Formato OBRIGAT√ìRIO da Resposta (Markdown):**
    *   **N√ÉO CRIE SE√á√ïES COM T√çTULOS GEN√âRICOS.**
    *   Comece com um t√≠tulo de n√≠vel 2 (Markdown: \`##\`) formatado como: \`## Sugest√µes para seu Passeio Express em ${currentLocation.replace(/"/g, '')} (${availableTime}h - Foco: ${focus || QuickTripFocusOption.MIX})\`
    *   Para cada sugest√£o, use um subt√≠tulo de n√≠vel 3 (Markdown: \`###\`) com o nome da atividade/local, prefixado com um √≠cone relevante (Ex: \`### [ICON:MUSEUM] Nome do Local\`).
    *   **Detalhes para cada Sugest√£o (como Bullet Points com √çcones):**
        *   \`[ICON:INFO]\` Breve descri√ß√£o (1-2 frases concisas), mencionando como se relaciona ao foco, se aplic√°vel.
        *   \`[ICON:TIME]\` Dura√ß√£o Estimada na Atividade: (ex: 30 min, 1 hora).
        *   \`[ICON:MAP_PIN]\` Endere√ßo ou Ponto de Refer√™ncia Claro.
        *   \`[ICON:TRANSPORT]\` Como Chegar: (ex: "Caminhada de 10 min", "Metr√¥ Linha Azul - 2 paradas", "T√°xi ~5 min").
        *   **(Opcional) \`[ICON:RESTAURANT]\` Sugest√£o Alimentar R√°pida:** Se aplic√°vel e houver tempo (ex: "Caf√© XPTO nas proximidades para um lanche r√°pido").
        *   Forne√ßa links do Google Maps para o local principal da sugest√£o, se poss√≠vel, usando a pesquisa. O nome do local deve ser o texto do link. Ex: \`**[Ver Nome do Local no Google Maps](URL_GOOGLE_MAPS_LOCAL)**\`
    *   Seja conciso e direto ao ponto. Use a mesma lista de √≠cones fornecida nas instru√ß√µes de roteiro completo.
    *   Se n√£o for poss√≠vel encontrar sugest√µes vi√°veis para o tempo, local e foco fornecidos, informe educadamente em uma √∫nica frase.

**Exemplo de Formato para uma Sugest√£o (Foco: Cultural):**

### [ICON:MUSEUM] Visita R√°pida √† Galeria de Arte Local
*   [ICON:INFO] Uma pequena galeria com exposi√ß√µes de artistas locais. √ìtimo para uma dose r√°pida de cultura.
*   [ICON:TIME] Dura√ß√£o Estimada na Atividade: 45 minutos.
*   [ICON:MAP_PIN] **Endere√ßo:** Av. Principal, 456, Bairro das Artes.
*   [ICON:TRANSPORT] **Como Chegar:** Metr√¥ Linha Verde - 1 parada da sua localiza√ß√£o, depois 5 min de caminhada.
*   **[Ver Galeria de Arte Local no Google Maps](https://www.google.com/maps/search/?api=1&query=Galeria+de+Arte+Local+Av+Principal+456)**

**Use o Google Search para encontrar informa√ß√µes atualizadas sobre locais, endere√ßos e poss√≠veis links para o Google Maps.**
Produza apenas o roteiro em Markdown, come√ßando com o t√≠tulo principal de n√≠vel 2.
`;

  const contents: Content[] = [{ role: "user", parts: [{text: prompt}] }];

  try {
    const response = await ai.models.generateContent({
      model: GEMINI_MODEL_TEXT,
      contents: contents,
      config: { tools: [{googleSearch: {}}] }
    });
    return response;
  } catch (error) {
    console.error("Erro ao chamar a API Gemini para gerar passeio r√°pido:", error);
    if (error instanceof Error) {
        if (error.message.includes('API_KEY_INVALID') || error.message.includes('API key not valid')) {
             throw new Error("Chave de API inv√°lida. Verifique sua configura√ß√£o.");
        }
         if (error.message.includes('Quota') || error.message.includes('quota')) {
            throw new Error("Cota da API excedida. Tente novamente mais tarde.");
        }
        if (error.message.toLowerCase().includes('billing') || error.message.toLowerCase().includes('conta de faturamento')) {
            throw new Error("Problema com a conta de faturamento do Google Cloud. Verifique suas configura√ß√µes de faturamento.");
        }
        if (error.message.toLowerCase().includes('permission denied') || error.message.toLowerCase().includes('access denied')) {
            throw new Error("Permiss√£o negada para acessar a API Gemini. Verifique as permiss√µes da sua chave de API no Google Cloud.");
        }
    }
    throw new Error("Falha ao gerar sugest√µes para passeio r√°pido. A IA pode estar sobrecarregada ou houve um problema na comunica√ß√£o. Tente novamente.");
  }
};